package br.com.cristalia.colunas.view;

import br.com.cristalia.biblioteca.dao.ArquivosDAO;
import br.com.cristalia.biblioteca.model.Arquivos;
import br.com.cristalia.biblioteca.util.DataHora;
import br.com.cristalia.biblioteca.util.Frames;
import br.com.cristalia.biblioteca.util.Pdf;
import br.com.cristalia.biblioteca.util.Senha;
import br.com.cristalia.biblioteca.dao.ColunaLogDAO;
import br.com.cristalia.biblioteca.dao.ColunaUtilDAO;
import br.com.cristalia.biblioteca.model.ColunaLog;
import br.com.cristalia.biblioteca.model.ColunaUtil;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rafael.lopes
 */
public final class FrmColunaHistorico extends javax.swing.JDialog {

    final String zeros = "0000";
    private Long col_id = null;
    private File anexo = null;

    /**
     * Creates new form FrmColunaHistorico
     *
     * @param parent
     * @param modal
     * @param id
     */
    public FrmColunaHistorico(java.awt.Frame parent, boolean modal, Long id) {
        super(parent, modal);
        initComponents();
        Frames.setUpFrame(this, "Histórico da Coluna", false);
        col_id = id;
        carregarColuna();
        readAnexos();
        readHistorico();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnFechar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtCodigoColuna = new javax.swing.JTextField();
        txtFabricanteColuna = new javax.swing.JTextField();
        txtAtivacaoColuna = new javax.swing.JTextField();
        txtAnaliseColuna = new javax.swing.JTextField();
        txtMetodoColuna = new javax.swing.JTextField();
        txtSetorColuna = new javax.swing.JTextField();
        txtParticulaColuna = new javax.swing.JTextField();
        txtMarcaColuna = new javax.swing.JTextField();
        txtDiametroColuna = new javax.swing.JTextField();
        txtVagaColuna = new javax.swing.JTextField();
        txtTamanhoColuna = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtObsColuna = new javax.swing.JTextField();
        pnlDados = new javax.swing.JTabbedPane();
        pnlHistorico = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHistoricoColuna = new javax.swing.JTable();
        btnAdicionarHistorico = new javax.swing.JButton();
        btnAbrirAnexoHistorico = new javax.swing.JButton();
        btnRemoverHistorico = new javax.swing.JButton();
        btnFinalizarHistorico = new javax.swing.JButton();
        pnlAnexos = new javax.swing.JPanel();
        btnAdicionarAnexo = new javax.swing.JButton();
        btnRemoverAnexo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAnexos = new javax.swing.JTable();
        btnAbrirAnexo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Coluna"));

        jLabel24.setText("Método:");

        jLabel25.setText("Código:");

        jLabel26.setText("Fabricante:");

        jLabel27.setText("Setor:");

        jLabel29.setText("Tamanho:");

        txtCodigoColuna.setEditable(false);
        txtCodigoColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtFabricanteColuna.setEditable(false);
        txtFabricanteColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtAtivacaoColuna.setEditable(false);
        txtAtivacaoColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtAnaliseColuna.setEditable(false);
        txtAnaliseColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtMetodoColuna.setEditable(false);
        txtMetodoColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtSetorColuna.setEditable(false);
        txtSetorColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtParticulaColuna.setEditable(false);
        txtParticulaColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtMarcaColuna.setEditable(false);
        txtMarcaColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtDiametroColuna.setEditable(false);
        txtDiametroColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtVagaColuna.setEditable(false);
        txtVagaColuna.setBackground(new java.awt.Color(204, 204, 204));

        txtTamanhoColuna.setEditable(false);
        txtTamanhoColuna.setBackground(new java.awt.Color(204, 204, 204));

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("Análise:");

        jLabel39.setText("Marca:");

        jLabel40.setText("Partícula:");

        jLabel41.setText("Diâmetro:");

        jLabel34.setText("Vaga:");

        jLabel35.setText("Ativação:");

        jLabel36.setText("Obs:");

        txtObsColuna.setEditable(false);
        txtObsColuna.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAnaliseColuna))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(txtMetodoColuna))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSetorColuna)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(txtFabricanteColuna)
                                        .addGap(2, 2, 2)))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(txtTamanhoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel41)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDiametroColuna))
                                    .addComponent(txtMarcaColuna))
                                .addGap(13, 13, 13)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel40, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtVagaColuna)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(txtParticulaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel35)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtAtivacaoColuna))))
                            .addComponent(txtObsColuna))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtCodigoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAnaliseColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMetodoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtFabricanteColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39)
                    .addComponent(txtMarcaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(txtVagaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(txtAtivacaoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSetorColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel29)
                    .addComponent(txtTamanhoColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(txtParticulaColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(txtDiametroColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtObsColuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        tblHistoricoColuna.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Col_Log_Id", "Campanha", "Setor", "Equipamento", "Usuário / Início", "Usuário / Fim", "n° Injeções", "Anexo", "Obs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHistoricoColuna.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblHistoricoColuna.getTableHeader().setReorderingAllowed(false);
        tblHistoricoColuna.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHistoricoColunaMouseClicked(evt);
            }
        });
        tblHistoricoColuna.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblHistoricoColunaKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblHistoricoColuna);
        if (tblHistoricoColuna.getColumnModel().getColumnCount() > 0) {
            tblHistoricoColuna.getColumnModel().getColumn(0).setMinWidth(80);
            tblHistoricoColuna.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblHistoricoColuna.getColumnModel().getColumn(0).setMaxWidth(80);
            tblHistoricoColuna.getColumnModel().getColumn(1).setPreferredWidth(300);
            tblHistoricoColuna.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblHistoricoColuna.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblHistoricoColuna.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblHistoricoColuna.getColumnModel().getColumn(5).setPreferredWidth(200);
            tblHistoricoColuna.getColumnModel().getColumn(6).setPreferredWidth(80);
            tblHistoricoColuna.getColumnModel().getColumn(7).setPreferredWidth(50);
            tblHistoricoColuna.getColumnModel().getColumn(8).setPreferredWidth(300);
        }

        btnAdicionarHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_plus_24.png"))); // NOI18N
        btnAdicionarHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarHistoricoActionPerformed(evt);
            }
        });

        btnAbrirAnexoHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_view_32.png"))); // NOI18N
        btnAbrirAnexoHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirAnexoHistoricoActionPerformed(evt);
            }
        });

        btnRemoverHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_minus_24.png"))); // NOI18N
        btnRemoverHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverHistoricoActionPerformed(evt);
            }
        });

        btnFinalizarHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_flag_finish_32.png"))); // NOI18N
        btnFinalizarHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarHistoricoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHistoricoLayout = new javax.swing.GroupLayout(pnlHistorico);
        pnlHistorico.setLayout(pnlHistoricoLayout);
        pnlHistoricoLayout.setHorizontalGroup(
            pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 962, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAdicionarHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAbrirAnexoHistorico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnRemoverHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFinalizarHistorico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlHistoricoLayout.setVerticalGroup(
            pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(pnlHistoricoLayout.createSequentialGroup()
                        .addComponent(btnAbrirAnexoHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdicionarHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoverHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFinalizarHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlDados.addTab("Histórico", pnlHistorico);

        btnAdicionarAnexo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_plus_24.png"))); // NOI18N
        btnAdicionarAnexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarAnexoActionPerformed(evt);
            }
        });

        btnRemoverAnexo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_minus_24.png"))); // NOI18N
        btnRemoverAnexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverAnexoActionPerformed(evt);
            }
        });

        tblAnexos.setAutoCreateRowSorter(true);
        tblAnexos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doc_Id", "Nome", "Tipo", "Tamanho", "Descrição", "Versão"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAnexos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblAnexos.setSurrendersFocusOnKeystroke(true);
        tblAnexos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAnexosMouseClicked(evt);
            }
        });
        tblAnexos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblAnexosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblAnexos);

        btnAbrirAnexo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/icon_view_32.png"))); // NOI18N
        btnAbrirAnexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirAnexoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAnexosLayout = new javax.swing.GroupLayout(pnlAnexos);
        pnlAnexos.setLayout(pnlAnexosLayout);
        pnlAnexosLayout.setHorizontalGroup(
            pnlAnexosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnexosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 962, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAnexosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAnexosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAbrirAnexo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRemoverAnexo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAdicionarAnexo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlAnexosLayout.setVerticalGroup(
            pnlAnexosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnexosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAnexosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(pnlAnexosLayout.createSequentialGroup()
                        .addComponent(btnAbrirAnexo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdicionarAnexo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoverAnexo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnlDados.addTab("Anexos", pnlAnexos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnlDados, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        fechar();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnAdicionarAnexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarAnexoActionPerformed
        addAnexo();
    }//GEN-LAST:event_btnAdicionarAnexoActionPerformed

    private void btnRemoverAnexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverAnexoActionPerformed
        if (tblAnexos.getSelectedRow() != -1) {
            removerAnexo();
        }
    }//GEN-LAST:event_btnRemoverAnexoActionPerformed

    private void tblAnexosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAnexosMouseClicked
        if (tblAnexos.getSelectedRow() != -1) {
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Pdf.view((Long) tblAnexos.getValueAt(tblAnexos.getSelectedRow(), 0), this);
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
            }
        }
    }//GEN-LAST:event_tblAnexosMouseClicked

    private void tblAnexosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblAnexosKeyReleased
        if (tblAnexos.getSelectedRow() != -1) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                removerAnexo();
            }
        }
    }//GEN-LAST:event_tblAnexosKeyReleased

    private void btnAbrirAnexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirAnexoActionPerformed
        if (tblAnexos.getSelectedRow() != -1) {
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                Pdf.view((Long) tblAnexos.getValueAt(tblAnexos.getSelectedRow(), 0), this);
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
            }
        }
    }//GEN-LAST:event_btnAbrirAnexoActionPerformed

    private void btnAdicionarHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarHistoricoActionPerformed
        try {
            ColunaUtilDAO colUtilDAO = new ColunaUtilDAO();
            FrmColunaHistoricoDados frm = new FrmColunaHistoricoDados(null, true,
                    colUtilDAO.findById(ColunaUtil.class, col_id), true);
            frm.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        } finally {
            readHistorico();
        }
    }//GEN-LAST:event_btnAdicionarHistoricoActionPerformed

    private void tblHistoricoColunaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHistoricoColunaMouseClicked
        if (evt.getClickCount() == 2) {
            editar();
        }
    }//GEN-LAST:event_tblHistoricoColunaMouseClicked

    private void btnAbrirAnexoHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirAnexoHistoricoActionPerformed
        if (tblHistoricoColuna.getSelectedRow() != -1) {
            try {
                if ((boolean) tblHistoricoColuna.getValueAt(tblHistoricoColuna.getSelectedRow(), 7)) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    ColunaLogDAO colLogDAO = new ColunaLogDAO();
                    Pdf.view(colLogDAO.findById(ColunaLog.class, (Long) tblHistoricoColuna.getValueAt(tblHistoricoColuna.getSelectedRow(), 0)).getAnexo().getId(), this);
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }else{
                    JOptionPane.showMessageDialog(null, "Esse registros não contém Anexo!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
            }
        }
    }//GEN-LAST:event_btnAbrirAnexoHistoricoActionPerformed

    private void btnRemoverHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverHistoricoActionPerformed
        if (tblHistoricoColuna.getSelectedRow() != -1) {
            removerHistorico();
        }
    }//GEN-LAST:event_btnRemoverHistoricoActionPerformed

    private void tblHistoricoColunaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblHistoricoColunaKeyReleased
        if (tblHistoricoColuna.getSelectedRow() != -1) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                removerHistorico();
            }
        }
    }//GEN-LAST:event_tblHistoricoColunaKeyReleased

    private void btnFinalizarHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarHistoricoActionPerformed
        try {
            ColunaLogDAO colLogDAO = new ColunaLogDAO();
            new FrmColunaFinalizarHistorico(null, true, colLogDAO.findById(ColunaLog.class,
                    (Long) tblHistoricoColuna.getValueAt(tblHistoricoColuna.getSelectedRow(), 0)))
                    .setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados: " + e);
        } finally {
            readHistorico();
        }
    }//GEN-LAST:event_btnFinalizarHistoricoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmColunaHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FrmColunaHistorico dialog = new FrmColunaHistorico(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirAnexo;
    private javax.swing.JButton btnAbrirAnexoHistorico;
    private javax.swing.JButton btnAdicionarAnexo;
    private javax.swing.JButton btnAdicionarHistorico;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnFinalizarHistorico;
    private javax.swing.JButton btnRemoverAnexo;
    private javax.swing.JButton btnRemoverHistorico;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlAnexos;
    private javax.swing.JTabbedPane pnlDados;
    private javax.swing.JPanel pnlHistorico;
    private javax.swing.JTable tblAnexos;
    private javax.swing.JTable tblHistoricoColuna;
    private javax.swing.JTextField txtAnaliseColuna;
    private javax.swing.JTextField txtAtivacaoColuna;
    private javax.swing.JTextField txtCodigoColuna;
    private javax.swing.JTextField txtDiametroColuna;
    private javax.swing.JTextField txtFabricanteColuna;
    private javax.swing.JTextField txtMarcaColuna;
    private javax.swing.JTextField txtMetodoColuna;
    private javax.swing.JTextField txtObsColuna;
    private javax.swing.JTextField txtParticulaColuna;
    private javax.swing.JTextField txtSetorColuna;
    private javax.swing.JTextField txtTamanhoColuna;
    private javax.swing.JTextField txtVagaColuna;
    // End of variables declaration//GEN-END:variables

    private void carregarColuna() {
        try {
            ColunaUtil colUtil = new ColunaUtilDAO().findById(ColunaUtil.class, col_id);
            txtCodigoColuna.setText(colUtil.getSetor().getDepartamento().getSiglaDepartamento()
                    + "-" + colUtil.getColuna().getTipoColuna().getConfiguracao()
                    + "-" + zeros.substring(String.valueOf(colUtil.getCodigoColuna()).length())
                    + String.valueOf(colUtil.getCodigoColuna()));
            txtAnaliseColuna.setText((colUtil.getAnalise().getAnalise() == null
                    || colUtil.getAnalise().getAnalise().isEmpty())
                    ? "MULTIPROPÓSITO" : colUtil.getAnalise().getAnalise());
            txtAtivacaoColuna.setText(DataHora.getStringDate(colUtil.getDataAtivacao()));
            txtDiametroColuna.setText(colUtil.getColuna().getDiametroColuna().getDescricao());
            txtFabricanteColuna.setText(colUtil.getColuna().getFabricanteColuna().getDescricao());
            txtMarcaColuna.setText(colUtil.getColuna().getMarcaColuna().getDescricao());
            txtMetodoColuna.setText((colUtil.getMetodologia().getMetodo() == null
                    || colUtil.getMetodologia().getMetodo().isEmpty())
                    ? "MULTIPROPÓSITO" : colUtil.getMetodologia().getMetodo());
            txtObsColuna.setText(colUtil.getObs());
            txtParticulaColuna.setText(colUtil.getColuna().getParticulaColuna().getDescricao());
            txtSetorColuna.setText(colUtil.getSetor().getSetor());
            txtTamanhoColuna.setText(colUtil.getColuna().getTamanhoColuna().getDescricao());
            txtVagaColuna.setText(colUtil.getDataDescarte() == null
                    ? colUtil.getVaga().getColunaStorage().getSetor().getSetor()
                    + " - " + colUtil.getVaga().getColunaStorage().getTipo()
                    + " - " + colUtil.getVaga().getColunaStorage().getNumero()
                    + "  Vaga: " + colUtil.getVaga().getVaga()
                    : "Inativa");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados da Coluna: " + ex);
        }
    }

    private void editar() {
        //if (AcessoSistema.editarDados(ACESSO)) {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            ColunaLogDAO colLogDAO = new ColunaLogDAO();
            FrmColunaHistoricoDados frm = new FrmColunaHistoricoDados(null, true,
                    colLogDAO.findById(ColunaLog.class,
                            (Long) tblHistoricoColuna.getValueAt(tblHistoricoColuna.getSelectedRow(), 0)));
            frm.setVisible(true);
            readHistorico();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir os dados: " + ex);
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //}
    }

    private void addAnexo() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Senha senha = new Senha();
        try {
            ColunaUtilDAO colUtilDAO = new ColunaUtilDAO();
            ColunaUtil colUtil = new ColunaUtilDAO().findById(ColunaUtil.class, col_id);
            anexo = Pdf.carregar();
            if (anexo != null) {
                if (senha.Salvar()) {
                    colUtil.getAnexos().add(Pdf.salvar(anexo, "Anexo de Coluna"));
                    colUtil.setVersion(colUtil.getVersion() + 1);
                    colUtilDAO.salvar(colUtil);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao adicionar Anexo: " + ex);
        } finally {
            readAnexos();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void removerAnexo() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Senha senha = new Senha();
        try {
            ColunaUtilDAO colUtilDAO = new ColunaUtilDAO();
            ColunaUtil colUtil = colUtilDAO.findById(ColunaUtil.class, col_id);
            if (senha.Salvar()) {
                Arquivos arq = new ArquivosDAO().findById(Arquivos.class,
                        (Long) tblAnexos.getValueAt(tblAnexos.getSelectedRow(), 0));
                colUtil.getAnexos().remove(arq);
                colUtil.setVersion(colUtil.getVersion() + 1);
                colUtilDAO.salvar(colUtil);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao remover Anexo: " + ex);
        } finally {
            readAnexos();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void removerHistorico() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //if (AcessoSistema.deletarDados(ACESSO)) {
        ColunaLogDAO colLogDAO = new ColunaLogDAO();
        Senha senha = new Senha();
        try {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Realmente deseja Excluir esse registro?", "Aviso", JOptionPane.YES_NO_OPTION);
            if (dialogResult == 0) {
                if (senha.Salvar()) {
                    ColunaLog colLog = colLogDAO.findById(ColunaLog.class,
                            (Long) tblHistoricoColuna.getValueAt(tblHistoricoColuna.getSelectedRow(), 0));
                    colLogDAO.remover(ColunaLog.class, colLog.getId());
                    new ArquivosDAO().remover(Arquivos.class, colLog.getAnexo().getId());
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao excuir o dado: " + e.getMessage(), "Erro ao Excluir", JOptionPane.ERROR_MESSAGE);
        } finally {
            readHistorico();
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    public void readHistorico() {
        DefaultTableModel model = (DefaultTableModel) tblHistoricoColuna.getModel();
        ColunaLogDAO colLogDAO = new ColunaLogDAO();
        model.setNumRows(0);
        try {
            for (ColunaLog colLog : colLogDAO.findByColuna(col_id)) {
                model.addRow(new Object[]{
                    colLog.getId(),
                    colLog.getCampanha().getCampanha(),
                    colLog.getCampanha().getSetor().getSetor(),
                    colLog.getCampanha().getEquipamento().getTag(),
                    colLog.getUsuarioInicio().getUsuario() + " - " + DataHora.getStringDateTime(colLog.getCampanha().getDataInicio()),
                    colLog.getUsuarioFim() == null ? "" : colLog.getUsuarioFim().getUsuario() + " - " + DataHora.getStringDateTime(colLog.getCampanha().getDataFim()),
                    colLog.getInjecoes(),
                    colLog.getAnexo() != null,
                    colLog.getObs()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar Histórico: " + e);
        }
    }

    public void readAnexos() {
        DefaultTableModel model = (DefaultTableModel) tblAnexos.getModel();
        ColunaUtilDAO colUtilDAO = new ColunaUtilDAO();
        model.setNumRows(0);
        try {
            ColunaUtil colUtil = colUtilDAO.findListColunaUtilWithAnexo(col_id);
            Set<Arquivos> sourceSet = colUtil.getAnexos();
            sourceSet.forEach((arquivo) -> {
                model.addRow(new Object[]{
                    arquivo.getId(),
                    arquivo.getNome(),
                    arquivo.getTipo(),
                    arquivo.getTamanho() + " Kb",
                    arquivo.getDescricao(),
                    arquivo.getVersion()
                });
            });

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar Anexos: " + e);
        }
    }

    private void fechar() {
        Frames.fecharFrame(this);
    }
}
